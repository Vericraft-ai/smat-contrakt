/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  APIConsumer,
  APIConsumerInterface,
} from "../../contracts/APIConsumer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_jobId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "ChainlinkCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "ChainlinkFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "ChainlinkRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "volume",
        type: "uint256",
      },
    ],
    name: "DataFullfilled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_requestId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_volume",
        type: "uint256",
      },
    ],
    name: "fulfill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestVolumeData",
    outputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "volume",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawLink",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60e0604052600160045534801562000015575f80fd5b50604051620019da380380620019da83398181016040528101906200003b919062000293565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000085576200007f620000e560201b60201c565b62000097565b62000096816200017b60201b60201c565b5b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508260a081815250508160c081815250505050505062000332565b6200017973c89bd4e1632d3a43cb03aaad5262cbe4038bc57173ffffffffffffffffffffffffffffffffffffffff166338cc48316040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000147573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200016d919062000302565b6200017b60201b60201c565b565b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620001ed82620001c2565b9050919050565b620001ff81620001e1565b81146200020a575f80fd5b50565b5f815190506200021d81620001f4565b92915050565b5f819050919050565b620002378162000223565b811462000242575f80fd5b50565b5f8151905062000255816200022c565b92915050565b5f819050919050565b6200026f816200025b565b81146200027a575f80fd5b50565b5f815190506200028d8162000264565b92915050565b5f805f8060808587031215620002ae57620002ad620001be565b5b5f620002bd878288016200020d565b9450506020620002d08782880162000245565b9350506040620002e3878288016200027d565b9250506060620002f6878288016200020d565b91505092959194509250565b5f602082840312156200031a5762000319620001be565b5b5f62000329848285016200020d565b91505092915050565b60805160a05160c05161167d6200035d5f395f61038801525f6101fb01525f610366015261167d5ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80634357855e1461004e5780636021abac1461006a5780638dc654a214610088578063c618a1e414610092575b5f80fd5b61006860048036038101906100639190610e53565b6100b0565b005b6100726101f4565b60405161007f9190610ea0565b60405180910390f35b6100906103b3565b005b61009a6103b5565b6040516100a79190610ec8565b60405180910390f35b8160055f8281526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014690610f61565b60405180910390fd5b60055f8281526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a2816006819055507f221d507243adddffe789060be0e69bff4be830996c6b265bfda5083d86f886326006546040516101e79190610ec8565b60405180910390a1505050565b5f806102287f000000000000000000000000000000000000000000000000000000000000000030634357855e60e01b6103bb565b905061028c6040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152506040518060800160405280604981526020016115ff60499139836103ec9092919063ffffffff16565b61030b6040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f5241572c4554482c5553442c564f4c554d453234484f55520000000000000000815250836103ec9092919063ffffffff16565b5f670de0b6b3a764000090506103616040518060400160405280600581526020017f74696d6573000000000000000000000000000000000000000000000000000000815250828461041f9092919063ffffffff16565b6103ac7f0000000000000000000000000000000000000000000000000000000000000000837f0000000000000000000000000000000000000000000000000000000000000000610452565b9250505090565b565b60065481565b6103c3610d67565b6103cb610d67565b6103e285858584610519909392919063ffffffff16565b9150509392505050565b6104038284608001516105c890919063ffffffff16565b61041a8184608001516105c890919063ffffffff16565b505050565b6104368284608001516105c890919063ffffffff16565b61044d8184608001516105ed90919063ffffffff16565b505050565b5f8060045490506001816104669190610fac565b6004819055505f634042994660e01b5f80875f01513089604001518760018c608001515f01516040516024016104a39897969594939291906110e2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061050e86838684610698565b925050509392505050565b610521610d67565b6105318560800151610100610825565b5083855f01818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b6105d5826003835161088d565b6105e88183610a1290919063ffffffff16565b505050565b7fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008112156106245761061f8282610a33565b610694565b67ffffffffffffffff8113156106435761063e8282610aaa565b610693565b5f811261065a57610655825f8361088d565b610692565b610691826001837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61068c919061116e565b61088d565b5b5b5b5050565b5f30846040516020016106ac92919061125f565b6040516020818303038152906040528051906020012090508460055f8381526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a260025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b815260040161079e9392919061128a565b6020604051808303815f875af11580156107ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107de91906112fb565b61081d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081490611396565b60405180910390fd5b949350505050565b61082d610dd0565b5f60208361083b91906113e1565b146108675760208261084d91906113e1565b60206108599190611411565b826108649190610fac565b91505b818360200181815250506040518084525f81528281016020016040525082905092915050565b60178167ffffffffffffffff16116108c4576108be8160058460ff16901b60ff161784610af690919063ffffffff16565b50610a0d565b60ff8167ffffffffffffffff161161091a576108f3601860058460ff16901b1784610af690919063ffffffff16565b506109148167ffffffffffffffff16600185610b159092919063ffffffff16565b50610a0c565b61ffff8167ffffffffffffffff16116109715761094a601960058460ff16901b1784610af690919063ffffffff16565b5061096b8167ffffffffffffffff16600285610b159092919063ffffffff16565b50610a0b565b63ffffffff8167ffffffffffffffff16116109ca576109a3601a60058460ff16901b1784610af690919063ffffffff16565b506109c48167ffffffffffffffff16600485610b159092919063ffffffff16565b50610a0a565b6109e7601b60058460ff16901b1784610af690919063ffffffff16565b50610a088167ffffffffffffffff16600885610b159092919063ffffffff16565b505b5b5b5b505050565b610a1a610dd0565b610a2b83845f015151848551610b36565b905092915050565b610a5160036005600660ff16901b1783610af690919063ffffffff16565b50610aa682827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610a82919061116e565b604051602001610a929190610ec8565b604051602081830303815290604052610c22565b5050565b610ac860026005600660ff16901b1783610af690919063ffffffff16565b50610af28282604051602001610ade9190610ec8565b604051602081830303815290604052610c22565b5050565b610afe610dd0565b610b0d83845f01515184610c47565b905092915050565b610b1d610dd0565b610b2d84855f0151518585610c9d565b90509392505050565b610b3e610dd0565b8251821115610b4b575f80fd5b84602001518285610b5c9190610fac565b1115610b9157610b90856002610b8188602001518887610b7c9190610fac565b610d2a565b610b8b9190611444565b610d45565b5b5f80865180518760208301019350808887011115610baf5787860182525b60208701925050505b60208410610bf65780518252602082610bd19190610fac565b9150602081610be09190610fac565b9050602084610bef9190611411565b9350610bb8565b5f6001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b610c2f826002835161088d565b610c428183610a1290919063ffffffff16565b505050565b610c4f610dd0565b83602001518310610c7557610c748460028660200151610c6f9190611444565b610d45565b5b83518051602085830101848153818603610c90576001820183525b5050508390509392505050565b610ca5610dd0565b84602001518483610cb69190610fac565b1115610cde57610cdd8560028685610cce9190610fac565b610cd89190611444565b610d45565b5b5f600183610100610cef91906115b4565b610cf99190611411565b90508551838682010185831982511617815281518588011115610d1c5784870182525b505085915050949350505050565b5f81831115610d3b57829050610d3f565b8190505b92915050565b5f825f01519050610d568383610825565b50610d618382610a12565b50505050565b6040518060a001604052805f80191681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020015f8152602001610dca610dd0565b81525090565b6040518060400160405280606081526020015f81525090565b5f80fd5b5f819050919050565b610dff81610ded565b8114610e09575f80fd5b50565b5f81359050610e1a81610df6565b92915050565b5f819050919050565b610e3281610e20565b8114610e3c575f80fd5b50565b5f81359050610e4d81610e29565b92915050565b5f8060408385031215610e6957610e68610de9565b5b5f610e7685828601610e0c565b9250506020610e8785828601610e3f565b9150509250929050565b610e9a81610ded565b82525050565b5f602082019050610eb35f830184610e91565b92915050565b610ec281610e20565b82525050565b5f602082019050610edb5f830184610eb9565b92915050565b5f82825260208201905092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f66207468655f8201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b5f610f4b602883610ee1565b9150610f5682610ef1565b604082019050919050565b5f6020820190508181035f830152610f7881610f3f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610fb682610e20565b9150610fc183610e20565b9250828201905080821115610fd957610fd8610f7f565b5b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61100882610fdf565b9050919050565b61101881610ffe565b82525050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6110528161101e565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561108f578082015181840152602081019050611074565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6110b482611058565b6110be8185611062565b93506110ce818560208601611072565b6110d78161109a565b840191505092915050565b5f610100820190506110f65f83018b61100f565b611103602083018a610eb9565b6111106040830189610e91565b61111d606083018861100f565b61112a6080830187611049565b61113760a0830186610eb9565b61114460c0830185610eb9565b81810360e083015261115681846110aa565b90509998505050505050505050565b5f819050919050565b5f61117882611165565b915061118383611165565b925082820390508181125f8412168282135f8512151617156111a8576111a7610f7f565b5b92915050565b5f819050919050565b5f6111d16111cc6111c784610fdf565b6111ae565b610fdf565b9050919050565b5f6111e2826111b7565b9050919050565b5f6111f3826111d8565b9050919050565b5f8160601b9050919050565b5f611210826111fa565b9050919050565b5f61122182611206565b9050919050565b611239611234826111e9565b611217565b82525050565b5f819050919050565b61125961125482610e20565b61123f565b82525050565b5f61126a8285611228565b60148201915061127a8284611248565b6020820191508190509392505050565b5f60608201905061129d5f83018661100f565b6112aa6020830185610eb9565b81810360408301526112bc81846110aa565b9050949350505050565b5f8115159050919050565b6112da816112c6565b81146112e4575f80fd5b50565b5f815190506112f5816112d1565b92915050565b5f602082840312156113105761130f610de9565b5b5f61131d848285016112e7565b91505092915050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f72615f8201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b5f611380602383610ee1565b915061138b82611326565b604082019050919050565b5f6020820190508181035f8301526113ad81611374565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6113eb82610e20565b91506113f683610e20565b925082611406576114056113b4565b5b828206905092915050565b5f61141b82610e20565b915061142683610e20565b925082820390508181111561143e5761143d610f7f565b5b92915050565b5f61144e82610e20565b915061145983610e20565b925082820261146781610e20565b9150828204841483151761147e5761147d610f7f565b5b5092915050565b5f8160011c9050919050565b5f808291508390505b60018511156114da578086048111156114b6576114b5610f7f565b5b60018516156114c55780820291505b80810290506114d385611485565b945061149a565b94509492505050565b5f826114f257600190506115ad565b816114ff575f90506115ad565b8160018114611515576002811461151f5761154e565b60019150506115ad565b60ff84111561153157611530610f7f565b5b8360020a91508482111561154857611547610f7f565b5b506115ad565b5060208310610133831016604e8410600b84101617156115835782820a90508381111561157e5761157d610f7f565b5b6115ad565b6115908484846001611491565b925090508184048111156115a7576115a6610f7f565b5b81810290505b9392505050565b5f6115be82610e20565b91506115c983610e20565b92506115f67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846114e3565b90509291505056fe68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963656d756c746966756c6c3f6673796d733d455448267473796d733d555344a2646970667358221220a474e5ff14b9804aeac8972731932533b964be0d09e6912e9c2999d280495d4664736f6c63430008140033";

type APIConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: APIConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class APIConsumer__factory extends ContractFactory {
  constructor(...args: APIConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _oracle: PromiseOrValue<string>,
    _jobId: PromiseOrValue<BytesLike>,
    _fee: PromiseOrValue<BigNumberish>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<APIConsumer> {
    return super.deploy(
      _oracle,
      _jobId,
      _fee,
      _link,
      overrides || {}
    ) as Promise<APIConsumer>;
  }
  override getDeployTransaction(
    _oracle: PromiseOrValue<string>,
    _jobId: PromiseOrValue<BytesLike>,
    _fee: PromiseOrValue<BigNumberish>,
    _link: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _oracle,
      _jobId,
      _fee,
      _link,
      overrides || {}
    );
  }
  override attach(address: string): APIConsumer {
    return super.attach(address) as APIConsumer;
  }
  override connect(signer: Signer): APIConsumer__factory {
    return super.connect(signer) as APIConsumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): APIConsumerInterface {
    return new utils.Interface(_abi) as APIConsumerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): APIConsumer {
    return new Contract(address, _abi, signerOrProvider) as APIConsumer;
  }
}
